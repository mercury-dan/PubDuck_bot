import telebot
import datetime as DT
import kb
from db import SQLighter


admin = '576688754'
db = SQLighter('db.sqlite')
print("–ó–∞—à—ë–ª –≤ –ë–î")
bot = telebot.TeleBot('TOKEN')


@bot.message_handler(commands=['start'])
def start_message(message): 
    db = SQLighter('db.sqlite')

    name = message.from_user.first_name
    username = message.from_user.username
    user_id = message.from_user.id

    referrer_candidate = None
    if " " in message.text:
        referrer_candidate = message.text.split()[1]
        try:
            referrer_candidate = int(referrer_candidate)

        except ValueError:
            pass


    if(not db.user_exists_tg(user_id)):
        if username:
            db.add_user_tg(user_id, username, name)
            bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEEohZic7yYpKX0cmFu0vpyIOjCHfdb2gACAQEAAladvQoivp8OuMLmNCQE')
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, '+ name + ', —Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üíú\n\n*–ù–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ —Å–µ–±—è*\n\n–Ø - —ç—Ç–æ –∞–Ω–∞–ª–æ–≥ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞–º, –∏–º–µ—è —Å–≤–æ–∏ *—Ñ–∏—à–∫–∏*\n\n–£ –º–µ–Ω—è —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å–≤–æ–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏\n–ò –ø—Ä–∏ —ç—Ç–æ–º, —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ —Å–º–æ–∂–µ—Ç –∏—Ö —É–≤–∏–¥–µ—Ç—å\n\n–ß—Ç–æ-—Ç–æ –Ω–∞ –ø–æ–¥–æ–±–∏–∏ *–õ—É—á—à–∏—Ö –¥—Ä—É–∑–µ–π* –≤ Instagram\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —É–∑–Ω–∞–≤–∞–π –≤ *–ò–Ω—Ñ–æ*‚ùì', parse_mode="MARKDOWN", reply_markup=kb.keyboard1) 
            bot.send_message(admin, 'üö´ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\nüíé –ò–º—è:  ' + name + '\n‚≠ê –¢–µ–≥:  @' + str(username) + '\nüìù ID:  ' + str(user_id)) 

            if referrer_candidate != None:
                if(not db.reader_exists(user_id, referrer_candidate)):
                    db.add_publisher_and_user(referrer_candidate, user_id, name)
                    bot.send_message(user_id, f'–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç [–ù–µ–≥–æ/–ù–µ—ë](tg://user?id={referrer_candidate})', parse_mode="MARKDOWN")
                    bot.send_message(referrer_candidate, f'üìó –£ –≤–∞—Å *–Ω–æ–≤—ã–π —á–∏—Ç–∞—Ç–µ–ª—å* [{name}](tg://user?id={user_id})!\n\n*–í—ã–±–µ—Ä–∏—Ç–µ 1-3*\n\n1 - –õ—É—á—à–∏–π –¥—Ä—É–≥\n2 - –£—Ç–∫–∞\n3 - –û–±—ã—á–Ω—ã–π –¥—Ä—É–≥', parse_mode="MARKDOWN", reply_markup=kb.keyboard4)
                else:
                    bot.send_message(user_id, '–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ *—Ç–æ–≥–æ*, –ø–æ —á—å–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª', parse_mode="MARKDOWN")

        else:
            PATH = 'settings.jpg'
            bot.send_photo(message.chat.id, photo=open(PATH, 'rb'), caption='‚ùó –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ *–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* –≤ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö*', reply_markup=kb.keyboard0, parse_mode="MARKDOWN")
          
    else:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, '+ name + ', —Ä–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!', reply_markup=kb.keyboard1) 

        if referrer_candidate != None:
            if(not db.reader_exists(user_id, referrer_candidate)):
                db.add_publisher_and_user(referrer_candidate, user_id, name)
                bot.send_message(user_id, f'–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç [–ù–µ–≥–æ/–ù–µ—ë](tg://user?id={referrer_candidate})', parse_mode="MARKDOWN")
                bot.send_message(referrer_candidate, f'üìó –£ –≤–∞—Å *–Ω–æ–≤—ã–π —á–∏—Ç–∞—Ç–µ–ª—å* [{name}](tg://user?id={user_id})!\n\n*–í—ã–±–µ—Ä–∏—Ç–µ 1-3*\n\n1 - –õ—É—á—à–∏–π –¥—Ä—É–≥\n2 - –£—Ç–∫–∞\n3 - –û–±—ã—á–Ω—ã–π –¥—Ä—É–≥', parse_mode="MARKDOWN", reply_markup=kb.keyboard4)
            else:
                bot.send_message(user_id, '–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ *—Ç–æ–≥–æ*, –ø–æ —á—å–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª', parse_mode="MARKDOWN")

        else:
            pass

@bot.message_handler(commands=['donate'])
def send_donate_sys(message): 
    chat_id = message.from_user.id
    bot.send_message(chat_id, text='üíú –¢—É—Ç–∞ –º–æ–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—á–∏–∫–∞\nüíú –°—Å—ã–ª–∫–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–Ω–∏–∑—É ', reply_markup=kb.keyboard7)


@bot.message_handler(content_types=['text'])
def send_text(message):
    db = SQLighter('db.sqlite')
    user_id = message.from_user.id
    name = message.from_user.first_name
    username = message.from_user.username

    if message.text.lower() == '—É—Å—Ç–∞–Ω–æ–≤–∏–ª':
        bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –∑–∞–Ω–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Ç–æ–π —Å—Å—ã–ª–∫–µ, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã–π, —Ç—ã –ø–æ–ø–∞–ª —Å—é–¥–∞.\n–ï—Å–ª–∏ –∂–µ –∑–∞—à—ë–ª —Å–∞–º, —Ç–æ –∂–º–∏ - /start') 

    if message.text.lower() == '‚ùì –∏–Ω—Ñ–æ':
        list_Readers = db.take_readers_list(user_id)
        list_Publishers = db.take_publisher_list(user_id)
        bot.send_message(message.chat.id, f'*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è* üìå\n\n–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ *{len(list_Publishers)} –ª—é–¥–µ–π*\n–ù–∞ –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞–Ω—ã *{len(list_Readers)} –ª—é–¥–µ–π*\n\n*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞* ‚ùî\n\n–ü–æ–ª—É—á–∞–µ—Ç–µ —Å—Å—ã–ª–∫—É - [–°—Å—ã–ª–∫–∞ üîó]\n–†–∞–∑—Å—ã–ª–∞–µ—Ç–µ –µ—ë –¥—Ä—É–∑—å—è–º, –∑–Ω–∞–∫–æ–º—ã–º\n\n–ü—É–±–ª–∏–∫—É–µ—Ç–µ –Ω–æ–≤–æ—Å—Ç—å - [–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å üìë]\n\n–í—ã–±–∏—Ä–∞–µ—Ç–µ –∫—Ç–æ –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å\n*–ü—Ä–∏–º–µ—Ä:* 2 - —É–≤–∏–¥—è—Ç –≤—Å–µ –∫—Ä–æ–º–µ –æ–±—ã—á–Ω—ã—Ö –¥—Ä—É–∑–µ–π!\n\n*–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã üõ†*\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ - /start\n–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç - /donate\n\n*–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã* - @ullneverknow üîß', parse_mode="MARKDOWN") 
        

    if message.text.lower() == 'üìë –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å':
        msg = bot.send_message(message.from_user.id, text=f'–í—Å—ë, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ —Ç—É—Ç, —è –¥–æ—Å—Ç–∞–≤–ª—é —Ç–≤–æ–∏–º –¥—Ä—É–∑—å—è–º\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å *–≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç*\n\n–î—É–º–∞–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π, *—è –∂–¥—É*',parse_mode="MARKDOWN", reply_markup=kb.keyboard8)
        bot.register_next_step_handler(msg, new_publication)

    if message.text.lower() == 'üîó —Å—Å—ã–ª–∫–∞':
        bot.send_message(message.from_user.id, text='–ü–æ –Ω–µ–π, –Ω–∞ —Ç–µ–±—è –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–∑—å—è\n–ò –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º —á–∏—Ç–∞—Ç—å —Ç–≤–æ–∏ –Ω–æ–≤–æ—Å—Ç–∏\n\nüîó t.me/pubduck_bot?start=' + str(user_id))


@bot.callback_query_handler(func=lambda call: True) 
def callback_worker(call): 

    db = SQLighter('db.sqlite')
    user_id = call.from_user.id
    msg=call.message.id
    reader_id = call.message.json.get('entities')[1].get('user').get('id')
    reader_name = call.message.json.get('entities')[1].get('user').get('first_name')


    if call.data == "1": 
        trust = 1
        db.select_trust_for_reader(user_id, reader_id, trust)
        bot.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ *–õ—É—á—à–∏–π –¥—Ä—É–≥* –¥–ª—è [{reader_name}](tg://user?id={reader_id})', message_id=msg, chat_id=user_id, parse_mode="MARKDOWN")

    if call.data == "2": 
        trust = 2
        db.select_trust_for_reader(user_id, reader_id, trust)
        bot.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ *–£—Ç–∫–∞* –¥–ª—è [{reader_name}](tg://user?id={reader_id})', message_id=msg, chat_id=user_id, parse_mode="MARKDOWN")

    if call.data == "3":  
        trust = 3
        db.select_trust_for_reader(user_id, reader_id, trust)
        bot.edit_message_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ *–û–±—ã—á–Ω—ã–π –¥—Ä—É–≥* –¥–ª—è [{reader_name}](tg://user?id={reader_id})', message_id=msg, chat_id=user_id, parse_mode="MARKDOWN")



def new_publication(msg):
    db = SQLighter('db.sqlite')
    user_id = msg.from_user.id

    if msg.text == '‚¨Ö –ù–∞–∑–∞–¥':
        bot.send_message(msg.from_user.id, text=f'‚ùó –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ú–µ–Ω—é', reply_markup=kb.keyboard1)
        
    else:
        msgid = msg.id
        db.new_publicationID(user_id, msgid)
        msg = bot.send_message(msg.from_user.id, text='–í—ã–±–µ—Ä–∏ –∫—Ç–æ —Å–º–æ–∂–µ—Ç —É–≤–∏–¥–∏—Ç—å —ç—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é üëÄ\n\n*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ* ‚ùó\n1 - –õ—É—á—à–∏–µ –¥—Ä—É–∑—å—è\n2 - –£—Ç–∫–∏\n3 - –û–±—ã—á–Ω—ã–µ –¥—Ä—É–∑—å—è', parse_mode="MARKDOWN", reply_markup=kb.keyboard6)
        bot.register_next_step_handler(msg, select_ppl)

      
def select_ppl(msg):
    db = SQLighter('db.sqlite')
    user_id = msg.from_user.id
    needTrust = 0
    if msg.text == '1':
        needTrust = 1
        whowillsee = '*–õ—É—á—à–∏–µ –¥—Ä—É–∑—å—è*'
        
    elif msg.text == '2':
        needTrust = 2
        whowillsee = '*–õ—É—á—à–∏–µ –¥—Ä—É–∑—å—è –∏ —É—Ç–∫–∏*'
    
    elif msg.text == '3':
        needTrust = 3
        whowillsee = '*–í—Å–µ —Ç–≤–æ–∏ —á–∏—Ç–∞—Ç–µ–ª–∏*'

    else: 
        pass
    
    db.setTrust(user_id, needTrust)
    msgid = db.user_info_tg(user_id)[3]
    bot.forward_message(msg.from_user.id, msg.from_user.id, msgid)
    msg = bot.send_message(msg.from_user.id, text=f'–í—ã—à–µ —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–ö—Ç–æ —É–≤–∏–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{whowillsee}\n\n–û—Å—Ç–∞–ª–æ—Å—å *–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å* –æ—Ç–ø—Ä–∞–≤–∫—É',parse_mode="MARKDOWN", reply_markup=kb.keyboard5)
    bot.register_next_step_handler(msg, apply_publication)


def apply_publication(msg):
    db = SQLighter('db.sqlite')
    user_id = msg.from_user.id
    if msg.text == '‚úî –û—Ç–ø—Ä–∞–≤–∏—Ç—å':
        user_info = db.user_info_tg(user_id)
        msgid = user_info[3]
        needTrust = user_info[4]
        n=0
        listofReaders = db.readers_for_publication(user_id, needTrust)

        for i in range(len(listofReaders)):
            bot.forward_message(listofReaders[n][1], listofReaders[n][0], msgid)
            n+=1

        bot.send_message(msg.from_user.id, text=f'‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', reply_markup=kb.keyboard1)

    elif msg.text == '‚ùå –ó–∞–Ω–æ–≥–æ':
        msg = bot.send_message(msg.from_user.id, text=f'–°–æ–∑–¥–∞–π—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–Ω–æ–≥–æ üîÑ', reply_markup=kb.keyboard5)
        bot.register_next_step_handler(msg, new_publication)
    
    elif msg.text == '‚¨Ö –ú–µ–Ω—é':
        bot.send_message(msg.from_user.id, text=f'‚ùó –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ú–µ–Ω—é', reply_markup=kb.keyboard1)
        
    else:
        pass

bot.polling(none_stop = True)

